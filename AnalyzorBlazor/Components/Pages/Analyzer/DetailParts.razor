@page "/analyzer/detailparts/{id:int}"
@inject IDeviceService deviceService
@inject IComponentService compService
@inject ITemplateService templateService
@inject IJSRuntime js
@inject NavigationManager navManager
@rendermode InteractiveServer

<h3>Device Details </h3>
<div class="row">
    <div class="col-6">

        <EditForm Model="Device">
            <fieldset disabled="true">
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="Name">Name</label>
                    </div>
                    <div class="col-8">
                        <InputText @bind-Value="Device.Name" class="form-control" />
                        <ValidationMessage For="@(() => Device.Name)" />
                    </div>

                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="TotalCount">Q-ty</label>
                    </div>
                    <div class="col-8">
                        <InputNumber @bind-Value="Device.TotalCount" class="form-control" />
                        <ValidationMessage For="@(() => Device.TotalCount)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="HoldUnit">Hold Unit</label>
                    </div>
                    <div class="col-8">
                        <InputNumber @bind-Value="Device.HoldUnit" class="form-control" />
                        <ValidationMessage For="@(() => Device.HoldUnit)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="TesterTime">Tester Time</label>
                    </div>
                    <div class="col-8">
                        <InputNumber @bind-Value="Device.TesterTime" class="form-control" />
                        <ValidationMessage For="@(() => Device.TesterTime)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="">Analyzer time</label>
                    </div>
                    <div class="col-8">
                        <InputNumber @bind-Value="Device.Analyzer_time" class="form-control" />
                        <ValidationMessage For="@(() => Device.Analyzer_time)" />
                    </div>
                </div>

                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="SN">SN</label>
                    </div>
                    <div class="col-8">
                        <InputText @bind-Value="Device.SN" class="form-control" />
                        <ValidationMessage For="@(() => Device.SN)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="Model">Model</label>
                    </div>
                    <div class="col-8">
                        <InputText @bind-Value="Device.Model" class="form-control" />
                        <ValidationMessage For="@(() => Device.Model)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="ModelName">Model Name By Analyzer</label>
                    </div>
                    <div class="col-8">
                        <InputText @bind-Value="Device.ModelName" class="form-control" />
                        <ValidationMessage For="@(() => Device.ModelName)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="Comments">Tester Comments</label>
                    </div>
                    <div class="col-8">
                        <InputTextArea @bind-Value="Device.Comments" class="form-control"></InputTextArea>
                        <ValidationMessage For="@(() => Device.Comments)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="OtherComments">Other Tester Comments</label>
                    </div>
                    <div class="col-8">
                        <InputTextArea @bind-Value="Device.OtherComments" class="form-control"></InputTextArea>
                        <ValidationMessage For="@(() => Device.OtherComments)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="OtherCommentsAz">Other Analyzer Comment</label>
                    </div>
                    <div class="col-8">
                        <InputTextArea @bind-Value="Device.OtherCommentsAz" class="form-control"></InputTextArea>
                        <ValidationMessage For="@(() => Device.OtherCommentsAz)" />
                    </div>
                </div>
                <div class="form-group row p-1">
                    <div class="col-4">
                        <label for="CreateT">Create Time By Tester</label>
                    </div>
                    <div class="col-8">
                        <label for="UpdateT">@Device.CreateT</label>
                    </div>
                </div>
                @if (Device.UpdateT != null)
                {
                    <div class="form-group row p-1">
                        <div class="col-4">
                            <label for="UpdateT">Update Time by Tester</label>
                        </div>
                        <div class="col-8">
                            <label for="UpdateT">@Device.UpdateT</label>
                        </div>
                    </div>
                }
                @if (Device.CreateA != null)
                {
                    <div class="form-group row p-1">
                        <div class="col-4">
                            <label for="CreateA">Start Time of Analyzer</label>
                        </div>
                        <div class="col-8">
                            <label for="UpdateT">@Device.CreateA</label>
                        </div>
                    </div>
                }
                @if (Device.CreateA != null)
                {
                    <div class="form-group row p-1">
                        <div class="col-4">
                            <label for="CreateA">Update Time of Analyzer</label>
                        </div>
                        <div class="col-8">
                            <label for="UpdateT">@Device.CreateA</label>
                        </div>
                    </div>
                }

            </fieldset>
            <br />
        </EditForm>
    </div>
    <div class="col-6">
        @if (AccList.Count > 0)
        {
            <h3>Device Accessories </h3>
            <div class="form-group row p-1">
                <div class="col-4"><label>Name</label></div>
                <div class="col-2"><label>Price</label></div>
                <div class="col-2"><label>Q-ty</label></div>
                <div class="col-2"><label>Comment</label></div>
            </div> @foreach (var t in AccList)
            {
                <div class="form-group row p-1">
                    <div class="col-4">
                        @{
                            var componentId = t.ComponentId;
                            var compName = CompList.FirstOrDefault(u => u.Id == componentId).Name;
                        }
                        <label>@compName <span style="font-size:x-small">(@componentId)</span></label>
                    </div>
                    <div class="col-2">
                        <label>@t.Value</label>
                    </div>
                    <div class="col-2">
                        <label>@t.Qty</label>
                    </div>
                    <div class="col-2">
                        <label>@t.Comment</label>
                    </div>
                </div>
            }
        }
        <hr />
        @if (PartsList.Count > 0)
        {
            <h3>Device Parts </h3>
            <div class="form-group row p-1">
                <div class="col-4"><label>Name</label></div>
                <div class="col-2"><label>Price</label></div>
                <div class="col-2"><label>Q-ty</label></div>
                <div class="col-2"><label>Comment</label></div>
            </div>
            @foreach (var t in PartsList)
            {
                <div class="form-group row p-1">
                    <div class="col-4">
                        @{
                            var componentId = t.ComponentId;
                            var compName = CompList.FirstOrDefault(u => u.Id == componentId).Name;
                        }
                        <label>@compName <span style="font-size:x-small">(@componentId)</span></label>
                    </div>
                    <div class="col-2">
                        <label>@t.Value</label>
                    </div>
                    <div class="col-2">
                        <label>@t.Qty</label>
                    </div>
                    <div class="col-2">
                        <label>@t.Comment</label>
                    </div>
                </div>
            }
        }
        <hr />
        <button @onclick="GoToEdit" class="btn btn-warning">
            <span class="oi oi-pencil"></span>
            Edit Device
        </button>
        <button @onclick="GoToAddParts" class="btn btn-info">
            <span class="oi oi-pencil"></span>
            Parts
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
        <button @onclick="Calculate" class="btn btn-success">
            <span class="oi oi-media-skip-backward"></span>
            Calculate
        </button>
        <hr />

        <table class="table">
            <tr>
                <th style="text-align:center; width:30%">Calculate</th>
                <th style="width:20%">OnHold <span style="font-size:small">(B)</span></th>
                <th><span style="font-size:small">(C)</span></th>
                <th>OnParts <span style="font-size:small">(F)</span></th>
                <th><span style="font-size:small">(G)</span></th>
            </tr>
            <tr>
                <th>For 1 hold unit<span style="font-size:x-small">/32</span></th>
                <td style="background-color: yellow">@B32</td>
                <td></td>
                <td style="background-color: yellow">@F32 (@F32mod)</td>
                <td style="background-color: yellow">@G32</td>
            </tr>
            <tr>
                <th>Total All<span style="font-size:x-small">/33</span></th>
                <td style="background-color: orange">@B33</td>
                <td style="background-color: lightblue">@C33</td>
                <td style="background-color: orange">@F33 (@F33mod)</td>
                <td style="background-color: lightblue">@G33 (@G33mod)</td>

            </tr>
            <tr>
                <th>Diff.Results,%<span style="font-size:x-small">/36</span></th>
                <td style="background-color: lightgreen">@B36</td>
            </tr>
            <tr>
                <th>Conclusion</th>
                <td colspan="2">@Conclusion</td>
                <td colspan="2">@BG</td>
            </tr>
        </table>
    </div>
</div>
@code {
    [Parameter]
    public int id { get; set; }
    private Device Device = new Device();
    private Template template  = new ();
    private List<DeviceComponent> AccList = new();
    private List<DeviceComponent> PartsList = new();
    private List<Component> CompList = new();
    private double[] job;
    private double[] job0;
    private double C32, C33, B32, B33, B36, G32, G33, F32, F33;
    private double C32mod, C33mod, B32mod, B33mod, G32mod, G33mod, F32mod, F33mod, BG;
    private string Conclusion;


    protected async override Task OnInitializedAsync()
    {
        var responses = await deviceService.Get(id);
        if (responses.Success)
        {
            Device = responses.Data;
        }
        var responses1 = await templateService.Get(1);
        if (responses1.Success)
        {
            //.FirstOrDefault(u => u.Name == Device.Template);
            template = responses1.Data;
        }
        AccList = await deviceService.GetDevComp(id, ComponentType.Accessories);
        PartsList = await deviceService.GetDevComp(id, ComponentType.Parts);
        CompList = await compService.Get();
    }
    private void GoToEdit()
    {
        navManager.NavigateTo($"/analyzer/update/{Device.Id}");
    }
    private void GoToAddParts()
    {
        navManager.NavigateTo($"/analyzer/addparts/{Device.Id}");
    }
    private void BackToList()
    {
        navManager.NavigateTo("/analyzer/");
    }
    private void Calculate ()
    {
        InitTemplate();
        InitCells();
        GetRezult();
    }
    private void InitCells ()
    {
        B32 = Math.Round(fnB32(), 2);
        F32 = Math.Round(fnF32(), 2);
        G32 = Math.Round((job[1] + job[2]) * QtyOfParts(), 2);  // 1-reciever 2-lister;                                 

        B33 = Math.Round(B32 * Device.TotalCount.Value, 2);
        C33 = Math.Round(B33 - (B33 / 100 * template.PersntLost), 2);
        F33 = Math.Round((F32 * Device.TotalCount.Value) - G32, 2);
        G33 = Math.Round(F33 - (F33 / 100 * template.PersntLost), 2);

        B36 = Math.Round((G33 - C33) / C33 * 100, 2);

        F32mod = (F32 < 0) ? -F32 : F32;
        F33mod = (F33 < 0) ? -F33 : F33;
        G33mod = (G33 < 0) ? -G33 : G33;

        BG = Math.Round((B33 - G33) / B33, 2);
    }
    private void InitTemplate ()
    {
        job = new[] {
(double)Device.TesterTime / 60 * (double)template.Tester_time_price,       // 0 -tester
(double)template.Receiver_time / 60 * (double)template.Receiver_time_price,  // 1-reciever
(double)template.Lister_time / 60 * (double)template.Lister_time_price,      // 2-lister
(double)template.Fullfilment_time / 60 * (double)template.Fullfilment_time_price, //3-fullfilment
0,//(double)template.Dissassembly_time / 60 * (double)template.Disasembler_time_price,//4-disasembler
             };
        job0 = new[] {
(double)Device.TesterTime / 60 * (double)template.Tester_time_price2,       // 0 -tester
(double)template.Receiver_time2 / 60 * (double)template.Receiver_time_price2,  // 1-reciever
(double)template.Lister_time2 / 60 * (double)template.Lister_time_price2,      // 2-lister
(double)template.Fullfilment_time2 / 60 * (double)template.Fullfilment_time_price2, //3-fullfilment
(double)template.Dissassembly_time / 60 * (double)template.Disasembler_time_price,//4-disasembler
             };
    }

    private double CostOfAccessories()
    {
        double sum = 0;
        foreach (var item in AccList)
            sum += (double)item.Value * ((item.Qty == null) ? 1 : (int)item.Qty);
        return sum;
    }
    private double CostOfParts()
    {
        double sum = 0;
        foreach (var item in PartsList)
            sum += (double)item.Value * ((item.Qty == null) ? 1 : (int)item.Qty);
        return sum;
    }
    private double fnB32()
    {
        if (Device.HoldUnit == null) return 0;
        double b32 = (double)Device.HoldUnit;
        b32 = b32 - CostOfAccessories() - template.Shipping_price - job0[0] - job0[1] - job0[2] - job0[3];
        return b32 - (b32 / 100 * template.Market_fees);
    }
    private int QtyAllParts()
    {
        int qty = 0;
        foreach (var item in PartsList)
            qty += ((item.Qty == null) ? 1 : (int)item.Qty);
        return qty;
    }
    private double fnF32()
    {
        double f32 = CostOfParts();
        f32 -= (double)QtyAllParts() * template.Shipping_price;
        f32 -= job[0];
        f32 -= job[3] * QtyAllParts();
        f32 -= job[4];
        double market_fees = (double)template.Market_fees;
        return f32 - (f32 / 100 * market_fees);
    }
    private int QtyOfParts()
    {
        int qty = 0;
        foreach (var item in PartsList)
            qty += ((item.Qty == null) ? 1 : (int)item.Qty);
        return qty;
    }
    private void GetRezult()
    {

        if (B33 > 0 && G33 < 0)
        {
            Device.Сonclusion = Сonclusions.ForOnHold;
            Conclusion = "OnHold";
        }
        else if (B33 < 0 && G33 > 0)
        {
            Device.Сonclusion = Сonclusions.ForOnHold;
            Conclusion = "OnParts";
        }
        else if (B33 < 0 && G33 < 0)
        {
            Device.Сonclusion = Сonclusions.BuyOnEconomics;
            Conclusion = "Buy On Economics";
        }
        else if (BG > -10 && BG < 10)
        {
            Device.Сonclusion = Сonclusions.For5050;
            Conclusion = "50 / 50";
        }
        else if (B33 > G33)
        {
            Device.Сonclusion = Сonclusions.ForParts;
            Conclusion = "OnParts";
        }
        else if (B33 > G33)
        {
            Device.Сonclusion = Сonclusions.ForOnHold;
            Conclusion = "ForOnHold";
        } else
        {
            Device.Сonclusion = null;
            Conclusion = "non answer";
        }
    }

}
